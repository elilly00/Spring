<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders --> 
	<!-- 
		appender : 전달 받은 로그를 어디에 출력 할지 결정하는 것
			ConsoleAppender		: 로그를 콘솔에 출력하기 위한 Appender
			JDBCAppender		: 로그를 DB에 출력하기 위한 Appender
			FileAppendr			: 로그를 파일에 출력하기 위한 Appender
								    지정 파일에 로그가 계속 남게 되면 크기가 지나치게 커질 수 있으므로 지속적인 로그 관리 불가능(힘들어짐)
			RollingFileAppender : FileAppender를 보완한 개념
								    일정 조건 후에 기존 파일을 백업 파일로 바꾸고 다시 처음부터 시작
								  (ex. DailyRollingFileAppender)
	
		layout : 로그를 어떤 형식으로 출력할지 경정
			DateLayout, HTMLLayout, SimpleLayout, XMLLayout, PatternLayout(디버깅에 가장 적합)	
			%p : debug, info, warn, error, fatal 등의 priority 출력
			%m : 로그 내용 출력
			%d : 로그 이벤트가 발생한 시간 출력(프로그램 실행 속도를 느리게 함)
				 포맷을 %d{HH:mm:ss, SSS} 같은 형태로 사용하며 SimpleDateFormat에 따른 프맷팅
			%t : 로그 이벤트가 발생된 스레드 이름 출력
			%% : %표시
			%n : 개행 문자 출력
			%c : package출력(패키지에 들어가 있는 클래스까지 출력)
			%c{n} : n(숫자)만큼의 package를 가장 하단부터 역으로 출력
					카테고리가 a.b.c.처럼 되어있다면 %c{2}는 b.c로 출력
			%C : 클래스명 출력, 패키지와 마찬가지로 {n}을 넣을 수 있고 하단부터 역으로 출력
			%F : 로깅이 발생한 프로그램 파일 명 출력
			%l : 로깅이 발생한 caller의 정보 출력
			%L : 로깅이 발생한 caller의 라인 수 출력
			%M : 로깅이 발생한 method 이름 출력
			%r : 애플리케이션 시작 이후부터 로깅이 발생한 시점의 시간(milliseconds)출력			  
	 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender"> 
		<param name="Target" value="System.out" /> <!-- System.out : 콘솔에 출력하기 때문 -->
		<layout class="org.apache.log4j.PatternLayout"> <!-- 로그 자체에 대한 출력 패턴 -->
<!-- 			<param name="ConversionPattern" value="%-5p: %c - %m%n" />  -->
			<param name="ConversionPattern" value="%-5p: (%t)%c - %m(%d)%n" />  <!-- 내가 원하는 형식으로 작성 가능--> 
			<!-- priority : package - 로그 내용 + 개행 문자 출력  // -5 : 5개의 자릿 수 (- : 왼쪽 정렬) => for문 이용해 곱하기 할 때 배웠음 -->
		</layout>
	</appender>
	
	<appender name="console2" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p:%C{1}.%M{%L} - %m%n" />
		</layout>
	</appender>
	
	<appender name="myDailyRollingFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="/logs/member/login.log"/>
		<param name="Append" value="true"/> <!-- 해당 파일에 이어쓰겠다는 의미 -->
		<param name="encoding" value="UTF-8"/>
		<param name="DatePattern" value="'.'yyyyMMdd"/><!-- 매일 새로운 파일이 만들어지고 전날 파일은 백업 파일이 되므로 백업 파일을 만드는 경우 추가할 날짜 정보 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{yy-MM-dd HH:mm:ss} [%p] %c{1}.%M{%L} - %m%n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<!-- 
		발생한 로그들을 받아주는 역할 
			**주의 : name속성 값에 오타가 있어도 에러가 발생하지 않음**
		
		DEBUG < INFO < WARN < ERROR < FATAL
			설정한 level 이상만 출력할 수 있음 (ex. level을 info로 설정하면 debug를 제외한 모두 출력 가능)
		
		FATAL	: 아주 심각한 에러
		ERROR	: 어떤 요청 처리 중 문제 발생
		WARN	: 프로그램 실행에는 문제 없지만 향후 시스템 에러의 원이 될 수 있는 경고성 메세지
		INFO	: 상태 변경과 같은 정보성 메세지
		DEBUG	: 개발 시 디버그 용도로 사용하는 메세지(레벨이 광범위함)
		TRACE	: 디버그 레벨이 너무 광범위한 것을 해결하기 위해 조금 더 상세한 이벤트를 나타내기 위해 사용(경로 추적)
	-->
	<logger name="com.kh.spring">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	
	<!-- 패키지가 겹치더라도 나에게 더 가까운 logger가 실행 됨 -->
	<logger name="com.kh.spring.log.Log4jTest" additivity="false">
		<level value="debug" />
		<appender-ref ref="console" /> 
		<!-- 
			결과가 2개씩 출력됨
			: 먼저 logger에서 자식 태그인 appender-ref를 통해 console이라는 appender를 참조하기 때문에 console에 출력되고
			    두번째로 모든 자식 logger는 root Logger로 넘어가고 root Logger에서도 appender-ref를 통해
			  console을 참조하기 때문에 또 한 번 더 출력됨
			=> 결과를 한 번만 출력하기 위해 additivity="false"(부모에 넘어가지 않겠다라는 의미 : root Logger로 넘어가지 않음)
		-->
	</logger>
	
	<logger name="com.kh.spring.member.controller.MemberController" additivity="false">
		<level value="debug" />
		<appender-ref ref="console2" />
<!-- 		<appender-ref ref="myDailyRollingFile" /> --> <!-- 인터셉터를 이용해 분리시켜주기 어느 것을 분리해도 상관 없음 -->
	</logger>
	
	<logger name="com.kh.spring.common.interceptor.TestInterceptor" additivity="false">
		<level value="debug" />
		<appender-ref ref="console2" />
	</logger>
	
	<logger name="com.kh.spring.common.interceptor.LoginInterceptor">
		<level value="info"/>
		<appender-ref ref="myDailyRollingFile"/>
	</logger>
	
	<logger name="com.kh.spring.common.aop" additivitt="false">
		<level value="debug"/>
		<appender-ref ref="console2" /> <!-- 없어도 됨 -->
	</logger>
	
	<!-- Root Logger -->
	<!-- 
		모든 자식 logger들이 출력이 root Logger를 통해 이루어짐 (모든 로거에 대한 부모 )
		로거 발생을 하면 기본적으로 root로 넘어가고 appender-ref를 통해 console에 맞게 출력 됨
	-->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" /> 
		<!-- ref: 참조한다는 의미 -->
	</root>
	
</log4j:configuration>
